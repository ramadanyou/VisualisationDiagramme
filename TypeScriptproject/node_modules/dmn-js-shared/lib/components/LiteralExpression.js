import { createVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import FeelEditor from '@bpmn-io/feel-editor';

/**
 * A drop-in replacement for ContentEditable which uses FEEL editor under the hood.
 * It does not support placeholder.
 *
 * The callback `onInput(text)` receives text (including line breaks)
 * only. Updating the value via props will update the selection
 * if needed, too.
 *
 * @example
 *
 * class SomeComponent extends Component {
 *
 *   render() {
 *     return (
 *       <LiteralExpression
 *         className="some classes"
 *         value={ this.state.text }
 *         onInput={ this.handleInput }
 *         onFocus={ ... }
 *         onBlur={ ... } />
 *     );
 *   }
 *
 * }
 *
 */
export default class LiteralExpression extends Component {
  constructor(props, context) {
    super(props, context);

    /** @type {HTMLElement} */
    _defineProperty(this, "handleMouseEvent", event => {
      event.stopPropagation();
    });
    _defineProperty(this, "handleKeyDownCapture", event => {
      if (event.key === 'Enter') {
        if (isAutocompleteOpen(this.node)) {
          event.triggeredFromAutocomplete = true;
          return;
        }

        // supress non cmd+enter newline
        if (this.props.ctrlForNewline && !isCmd(event)) {
          event.preventDefault();
        }
        if (this.props.singleLine) {
          event.preventDefault();
        }
      }
    });
    _defineProperty(this, "handleKeyDown", event => {
      // contain the event in the component to not trigger global handlers
      if (['Enter', 'Escape'].includes(event.key) && event.triggeredFromAutocomplete) {
        event.stopPropagation();
      }
    });
    _defineProperty(this, "handleChange", value => {
      const onInput = this.props.onInput;
      this.setState({
        value
      });
      if (onInput) {
        onInput(value);
      }
    });
    _defineProperty(this, "setNode", node => {
      this.node = node;
    });
    this.node = null;
    this.editor = null;
    this.state = {
      value: props.value
    };
  }
  componentDidMount() {
    this.editor = new FeelEditor({
      container: this.node,
      onChange: this.handleChange,
      value: this.state.value,
      variables: this.props.variables || []
    });
    this.node.addEventListener('mousedown', this.handleMouseEvent);

    // `capture: true` is needed to precede Keyboard handlers
    this.node.addEventListener('keydown', this.handleKeyDownCapture, true);
    this.node.addEventListener('keydown', this.handleKeyDown);
    if (this.props.autoFocus) {
      this.editor.focus(this.state.value.length);
    }
  }
  componentDidUpdate(prevProps) {
    const value = this.props.value;
    if (prevProps.value !== value && value !== this.state.value) {
      this.setState({
        value
      }, () => {
        this.editor.setValue(value);
      });
    }
    if (!deepEqual(prevProps.variables, this.props.variables)) {
      this.editor.setVariables(this.props.variables);
    }
  }
  componentWillUnmount() {
    this.node.removeEventListener('mousedown', this.handleMouseEvent);

    // `capture: true` is needed to precede FEEL editor default handling
    this.node.removeEventListener('keydown', this.handleKeyDownCapture, true);
    this.node.removeEventListener('keydown', this.handleKeyDown);
  }
  render() {
    return createVNode(1, "div", ['literal-expression', this.props.className || ''].join(' '), null, 1, {
      "onClick": this.handleMouseEvent,
      "onFocusIn": this.props.onFocus,
      "onFocusOut": this.props.onBlur
    }, null, this.setNode);
  }
}
function isCmd(event) {
  return event.metaKey || event.ctrlKey;
}
function isAutocompleteOpen(node) {
  return node.querySelector('.cm-tooltip-autocomplete');
}
function deepEqual(a, b) {
  return JSON.stringify(a) === JSON.stringify(b);
}
//# sourceMappingURL=LiteralExpression.js.map