import { createVNode, createComponentVNode } from "inferno";
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { Component } from 'inferno';
import ContentEditable from 'dmn-js-shared/lib/components/ContentEditable';
import LiteralExpression from 'dmn-js-shared/lib/components/LiteralExpression';
export default class InputEditor extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty(this, "handleKeyDown", event => {
      if (event.key === 'Enter') {
        event.stopPropagation();
      }
    });
    this.translate = context.injector ? context.injector.get('translate') : noopTranslate;
    this.expressionLanguages = context.injector.get('expressionLanguages', false);
    this.variableResolver = context.injector.get('variableResolver', false);
    this.handleValue = text => {
      let change = {
        text
      };
      this.handleChange(change);
    };
    this.handleLabelChange = value => {
      // default to <undefined> for empty string
      var label = value || undefined;
      this.handleChange({
        label
      });
    };
  }
  handleChange(changes) {
    var onChange = this.props.onChange;
    if (typeof onChange === 'function') {
      onChange(changes);
    }
  }
  getExpressionEditorComponent() {
    if (this.expressionLanguages && this.expressionLanguages.getDefault('inputCell').value !== 'feel') {
      return ContentEditable;
    }
    return LiteralExpression;
  }

  /**
   * Supress default menu closure on enter.
   * @param {KeyboardEvent} event
   */

  _getVariables() {
    return this.variableResolver && this.variableResolver.getVariables(this.props.element);
  }
  render() {
    const _this$props = this.props,
      label = _this$props.label,
      text = _this$props.text;
    const ExpressionEditor = this.getExpressionEditorComponent();
    const variables = this._getVariables();
    return createVNode(1, "div", "context-menu-container ref-input-editor input-edit", [createVNode(1, "div", "dms-form-control", createComponentVNode(2, ContentEditable, {
      "className": "dms-input-label",
      "value": label || '',
      "placeholder": this.translate('Input'),
      "singleLine": true,
      "onInput": this.handleLabelChange
    }), 2), createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", this.translate('Expression'), 0), createComponentVNode(2, ExpressionEditor, {
      "placeholder": this.translate('Enter expression'),
      "className": ['ref-text', 'dms-input'].join(' '),
      "onInput": this.handleValue,
      "value": text || '',
      "variables": variables
    })], 4)], 4, {
      "onKeyDown": this.handleKeyDown
    });
  }
}
function noopTranslate(str) {
  return str;
}
//# sourceMappingURL=InputEditor.js.map