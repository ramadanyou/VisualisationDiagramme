{"version":3,"file":"index.cjs","sources":["../src/snippets.ts","../src/completion.ts","../src/feel.ts"],"sourcesContent":["import { Completion, snippetCompletion } from '@codemirror/autocomplete';\n\n/**\n * A collection of FEEL-related [snippets](#autocomplete.snippet).\n */\nexport const snippets: readonly Completion[] = [\n  snippetCompletion('function(${params}) ${body}', {\n    label: 'function',\n    detail: 'definition',\n    type: 'keyword'\n  }),\n  snippetCompletion('for ${var} in ${collection} return ${value}', {\n    label: 'for',\n    detail: 'expression',\n    type: 'keyword'\n  }),\n  snippetCompletion('every ${var} in ${collection} satisfies ${condition}', {\n    label: 'every',\n    detail: 'quantified expression',\n    type: 'keyword'\n  }),\n  snippetCompletion('some ${var} in ${collection} satisfies ${condition}', {\n    label: 'some',\n    detail: 'quantified expression',\n    type: 'keyword'\n  }),\n  snippetCompletion('if ${condition} then ${value} else ${other value}', {\n    label: 'if',\n    detail: 'block',\n    type: 'keyword'\n  }),\n  snippetCompletion('{ ${key}: ${value} }', {\n    label: 'context',\n    detail: 'block',\n    type: 'keyword'\n  })\n];\n","import { syntaxTree } from '@codemirror/language';\nimport { SyntaxNode } from '@lezer/common';\n\nimport {\n  CompletionSource,\n  Completion,\n  completeFromList,\n  ifNotIn\n} from '@codemirror/autocomplete';\n\n\nexport function contextualKeyword(options: {\n  before?: string,\n  after?: string,\n  context: string,\n  keyword: string\n}) : CompletionSource {\n\n  const {\n    context: nodes,\n    after,\n    before,\n    keyword\n  } = options;\n\n  return ifInside({ nodes, before, after, keyword }, completeFromList([\n    { label: keyword, type: 'keyword', boost: 10 }\n  ]));\n}\n\nexport const keywordCompletions = [\n  contextualKeyword({\n    context: 'InExpression',\n    keyword: 'in'\n  }),\n  contextualKeyword({\n    context: 'IfExpression',\n    keyword: 'then',\n    after: 'if',\n    before: 'else'\n  }),\n  contextualKeyword({\n    context: 'IfExpression',\n    keyword: 'else',\n    after: 'then'\n  }),\n  contextualKeyword({\n    context: 'QuantifiedExpression',\n    keyword: 'satisfies'\n  }),\n  contextualKeyword({\n    context: 'ForExpression',\n    after: 'InExpressions',\n    keyword: 'return'\n  })\n];\n\nexport const dontComplete = [\n  'StringLiteral', 'Identifier',\n  'LineComment', 'BlockComment'\n];\n\nexport function snippetCompletion(snippets: readonly Completion[]) : CompletionSource {\n  return ifNotIn(\n    dontComplete, completeFromList(snippets.map(s => ({ ...s, type: 'text' })))\n  );\n}\n\nexport function matchLeft(node: SyntaxNode, position: number, nodes: (string|undefined)[]) : SyntaxNode | null {\n  return matchChildren(node, position, nodes, -1);\n}\n\nexport function matchRight(node: SyntaxNode, position: number, nodes: (string|undefined)[]) : SyntaxNode | null {\n  return matchChildren(node, position, nodes, 1);\n}\n\nexport function matchChildren(node: SyntaxNode, position: number, nodes: (string|undefined)[], direction: 1 | -1) : SyntaxNode | null {\n\n  let child = node[direction > 0 ? 'childAfter' : 'childBefore'](position);\n\n  while (child) {\n    if (nodes.includes(child.name)) {\n      return child;\n    }\n\n    if (child.type.isError && child.firstChild) {\n      if (nodes.includes(child.firstChild.name)) {\n        return child.firstChild;\n      }\n    }\n\n    child = child[direction > 0 ? 'nextSibling' : 'prevSibling'];\n  }\n\n  return null;\n}\n\nfunction matchUp(node: SyntaxNode, nodeNames: string | undefined | (string | undefined)[]) {\n\n  if (!Array.isArray(nodeNames)) {\n    nodeNames = [ nodeNames ];\n  }\n\n  for (; node; node = node.parent!) {\n    if (nodeNames.includes(node.name)) {\n      return node;\n    }\n\n    if (node.type.isTop) {\n      break;\n    }\n  }\n\n  return null;\n}\n\nexport function ifInside(options: {\n  nodes: string | string[],\n  keyword: string,\n  before?: string,\n  after?: string\n}, source: CompletionSource): CompletionSource {\n\n  const {\n    nodes,\n    before,\n    after,\n    keyword\n  } = options;\n\n  return (context) => {\n\n    const { state, pos } = context;\n\n    const node = matchUp(syntaxTree(state).resolveInner(pos, -1), nodes);\n\n    if (!node) {\n      return null;\n    }\n\n    if (matchLeft(node, pos, [ keyword, before ])) {\n      return null;\n    }\n\n    if (matchRight(node, pos, [ keyword, after ])) {\n      return null;\n    }\n\n    if (after && !matchLeft(node, pos, [ after ])) {\n      return null;\n    }\n\n    return source(context);\n  };\n}","import {\n  parser,\n  trackVariables\n} from 'lezer-feel';\n\nimport {\n  LRLanguage,\n  LanguageSupport,\n  delimitedIndent,\n  continuedIndent,\n  indentNodeProp,\n  foldNodeProp,\n  foldInside\n} from '@codemirror/language';\n\nimport {\n  snippets\n} from './snippets';\n\nimport {\n  keywordCompletions,\n  snippetCompletion\n} from './completion';\n\nimport {\n  CompletionSource\n} from '@codemirror/autocomplete';\n\n\n/**\n * A FEEL language provider based on the\n * [Lezer FEEL parser](https://github.com/nikku/lezer-feel),\n * extended with highlighting and indentation information.\n */\nexport const feelLanguage = LRLanguage.define({\n  parser: parser.configure({\n    props: [\n      indentNodeProp.add({\n        'Context': delimitedIndent({\n          closing: '}'\n        }),\n        'List FilterExpression': delimitedIndent({\n          closing: ']'\n        }),\n        'ParenthesizedExpression FunctionInvocation': continuedIndent({\n          except: /^\\s*\\)/\n        }),\n        'ForExpression QuantifiedExpression IfExpression': continuedIndent({\n          except: /^\\s*(then|else|return|satisfies)\\b/\n        }),\n        'FunctionDefinition': continuedIndent({\n          except: /^\\s*(\\(|\\))/\n        })\n      }),\n      foldNodeProp.add({\n        Context: foldInside,\n        List: foldInside,\n        ParenthesizedExpression: foldInside,\n        FunctionDefinition(node) {\n          const last = node.getChild(')');\n\n          if (!last) return null;\n\n          return {\n            from: last.to,\n            to: node.to\n          };\n        }\n      })\n    ]\n  }),\n  languageData: {\n    indentOnInput: /^\\s*(\\)|\\}|\\]|then|else|return|satisfies)$/,\n    commentTokens: {\n      line: '//',\n      block: {\n        open: '/*',\n        close: '*/'\n      }\n    }\n  }\n});\n\n/**\n * A language provider for FEEL Unary Tests\n */\nexport const unaryTestsLanguage = feelLanguage.configure({ top: 'UnaryTests' });\n\n/**\n * Language provider for FEEL Expression\n */\nexport const expressionLanguage = feelLanguage.configure({ top: 'Expression' });\n\n\n\n/**\n * Feel language support for CodeMirror.\n *\n * Includes [snippet](#lang-feel.snippets)\n */\nexport function feel(config: {\n  dialect?: 'expression' | 'unaryTests',\n  completions?: CompletionSource[],\n  context?: Record<string, any>\n} = {}) {\n  const lang = config.dialect === 'unaryTests' ? unaryTestsLanguage : expressionLanguage;\n\n  const contextualLang = lang.configure({\n    contextTracker: trackVariables(config.context)\n  });\n\n  const completions = config.completions || [\n    snippetCompletion(snippets),\n    keywordCompletions,\n  ].flat();\n\n  return new LanguageSupport(contextualLang, [\n    ...(\n      completions.map(autocomplete => feelLanguage.data.of({\n        autocomplete\n      }))\n    )\n  ]);\n\n}"],"names":["snippets","snippetCompletion","label","detail","type","contextualKeyword","options","context","nodes","after","before","keyword","ifInside","completeFromList","boost","keywordCompletions","dontComplete","ifNotIn","map","s","matchLeft","node","position","matchChildren","matchRight","direction","child","includes","name","isError","firstChild","matchUp","nodeNames","Array","isArray","parent","isTop","source","state","pos","syntaxTree","resolveInner","feelLanguage","LRLanguage","define","parser","configure","props","indentNodeProp","add","delimitedIndent","closing","continuedIndent","except","foldNodeProp","Context","foldInside","List","ParenthesizedExpression","FunctionDefinition","last","getChild","from","to","languageData","indentOnInput","commentTokens","line","block","open","close","unaryTestsLanguage","top","expressionLanguage","feel","config","lang","dialect","contextualLang","contextTracker","trackVariables","completions","flat","LanguageSupport","autocomplete","data","of"],"mappings":"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"}